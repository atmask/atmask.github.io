[{"content":"Big Idea From the start of my career I have been fascinated by Kubernetes. I love distributed systems and the rich history of how we have arrived where we are today with distributed system. We are living in the active evolution of our understanding of a vision for cloud computing. In the early years the vision was to present a homogenous Unix-like interface for managing an underlying collection of servers such as BOINC. Now we live in the world of many small virtualized unix environments distributed across servers, sharing compute.\nOne of the main drivers for our current state has been the advent of containerization and container orchestration. The goal of this blog is to go over the considerations and design of my baremetal Raspberry Pi Kubernetes cluster. This project was my adventure in going beyond being a user of Kubernetes services from Cloud Provider to understanding the physical magic behind the scenes.\nFull disclaimer: This project is largely based-off Anthony Simon\u0026rsquo;s own project for a similar build. I found his blog post lacked a lot of details though so I want to capture those missing parts here and go into more detail about my setup. You can find his great post here!\nYou can find the Ansible scripts and Helm charts that I manage for this project on my Github:\nHelm Charts Ansible Scripts Architecture and Requirements Before diving into the build list, architecture, and design for my build I want to review what, for me, were goals and requirements for setting up this project.\nPortability First, portability. I am in a season of live that is nomadic. I\u0026rsquo;m in different apartments for a year or two at a time. I want a build that I can easily unplug, bring somewhere else, and plug-in without needing any extra steps for set up.\nIsolation \u0026amp; Security Second, and closely rleated, isolation. I want the network that my cluster runs on to be on a subnet isolated from the LAN network to which it connects. I want all IPs to be in their own non-overlapping address space. I also don\u0026rsquo;t want my service publicly available or available to anyone connected to the LAN of my home network. They should only be accessible via VPN connection to the cluster network or via wireless/wired connection to the cluster LAN.\nPersistent Storage \u0026amp; Back-ups Third, I wanted my cluster to support some implementation of data persistence vis PVs and PVCs. I wanted this to be affordable and to be reliable. This ruled out out buying SSD storage for each node and using a distributed file store like Rook/Ceph or Longhorn. It also ruled out using hostPath storage on SD cards. (Spolier) My final end result uses a single Terabyte SSD that is running as an SMB share which can be mounted via the SMB csi.\nHTTPs My fourth requirement is that all of my services should be available over an HTTPs connection. Sure, the VPN is encrpyted, however, I want TLS termination at the cluster and not the only the VPN. Further, I don\u0026rsquo;t want browsers complaining that the site I am visiting is not secure. That is a bother for me and red flag for any firends or family who connect to my services.\nDNS Lastly, I want my services acessible via DNS records when a user is connected via VPN. I want the DNS server to sit on the LAN network and become the primary DNS server for users when they connect to the network. This keeps my A records off of public DNS servers.\nBuild List The following is my build list for the project:\nUCTronics RPi CLuster Case x1 Raspberry Pi 4b 8Gb x1 Rapsberry Pi 4b 2Gb x3 1 TB SSD x1 SATA to USB 3.0 Adapter x 1 TP-Link 5 port Gigabit PoE Network Switch x1 TP-Link Nano Router x1 0.3M Ethernet Cables x4 RPi PoE Hat x4 Note: I do not receive any commission when you purchase via the above the links. These are just what worked for my build and are what I recommend.\nConfiguring Networking With a project like this you need to start small and work up. Realistically, this means breaking up your end goal into small problems that you can manageably troubleshoot and solve as you go. Trying to take on too much with so many variables and unknowns in one swing will be fatal for a project of this kind. I have broken down this section into the incremental steps I took accomplish my vision for the networking.\nCreating the Subnet TP-Link in WISP mode.\nStatic Node IPs Assign static IPs to the nodes\nDHCP Settings Later on we\u0026rsquo;ll come back here and configure the DNS\nValidate TailScale Connectivity Load-Balancing, Ingress, and SSL/TLS Management Configuring MetalLB Validate with LoadBalancer Configuring Nginx-Ingress Configureing Cert-Manager Local DNS Management with Pi-Hole Persistent Storage Creating the SMB share Setting up the SMB CSI Driver Creating a PVC ","permalink":"http://localhost:1313/posts/02-bare-metal-k3s-on-rpi/","summary":"Big Idea From the start of my career I have been fascinated by Kubernetes. I love distributed systems and the rich history of how we have arrived where we are today with distributed system. We are living in the active evolution of our understanding of a vision for cloud computing. In the early years the vision was to present a homogenous Unix-like interface for managing an underlying collection of servers such as BOINC.","title":"Buidling a Bare Metal Kubernetes Cluster on Raspberry Pis"},{"content":"Big Idea The goal of this post is to capture the steps required to get started with Hugo and Github Pages. Hugo is a Go based static site generation tool. Github Pages is a feature of Github that allows anyone with a GitHub account host a static site.\nPart 1: Setting up GitHub Pages In order to server your site you will need to somewhere to host it. Github offers a free service called Github Pages that we will use for this purpose. Github Pages offers the free hosting of static website content. This means we will be able to build or Hugo site into a static site and then serve that via Github pages.\nCreate Github Pages Repo To get started with Github Pages for your blog, you will first need a repo in which you\u0026rsquo;ll store your website content. Github pages offers websites for individual projects or for your user. For this tutorial we will use the user Github Pages. The first step to creating this Pages site is creating a repo in your Github account that follows the naming scheme: \u0026lt;username\u0026gt;.github.io (substitute \u0026lt;username\u0026gt; with your Github username). Select Initialize this repository with a README and then then create the repo.\nNote: Your repository must be a public repo for pages to work.\nAfter creating your repository, navigate to the repository main page and click on Settings: From the Settings page navigate to the Pages under Code and Automation on the Side Menu: From here you will want to change your Build and deployment configuration to Github Actions. This will be required later when we want to specify a Github Actions workflow to build our static site content with Hugo.\nFor now leave the Custom domain configuration alone. We will return to this at a later step.\nPart 2: Setting Up Hugo The following section covers getting your static site running on your local machine. This will allow you to modify your themes and posts from your editor of choice and see updates via the local Hugo dev server.\nInstall Hugo to your local machine To get started with Hugo on your machine you\u0026rsquo;ll need to first install Hugo. On MacOS you can do this via Brew:\nbrew install hugo Create a New Hugo Site Locally To start a new hugo project run:\nhugo new site \u0026lt;github-username\u0026gt;.github.io --format yaml Note: Using --format yaml is optional. The default config format for Hugo is toml.\nThis will create a new directory named \u0026lt;github-username\u0026gt;.github.io that is pre-populated with the Hugo starter boilerplate. You don\u0026rsquo;t have to use the site name \u0026lt;github-username\u0026gt;.github.io. You can change it whatever you would like. However, in the case of Github pages, you created your pages site in a repo named \u0026lt;github-username\u0026gt;.github.io. To keep naming consistent use the name of the existing repo.\nConnect your local Hugo Project to the Git Repo Now that you have created a new Hugo site you will want to connect it to the Github repository you created earlier. To do this we will first initialize your new local project as a git project. This can be done by entering your project directory and the running git init\ncd \u0026lt;github-username\u0026gt;.github.io/ git init This enables version control for your project. Let\u0026rsquo;s create an initial commit of the Hugo site and push to git:\ngit add . git commit -m \u0026#34;Initial commit\u0026#34; git branch -M main git remote add origin \u0026lt;git clone url\u0026gt; git push -u origin main --force ## Use force in this case to override the README in github with new history Note: You can get the git clone url by navigating to your repository, selecting Clone and grabbing the https or ssh clone link. Select the ssh link if you have ssh set up for Github. This will keep you from having to enter your credentials on each push.\nAdd a Hugo Theme to your site By default Hugo does not include a theme for you site. This is where you get to pick how you want your site to look once built and deployed. You can find a complete list of themes on the Hugo themes page. For this wiki I will use the theme PaperMod as that is the theme of this blog.\nOnce you have selected a theme, you will want to clone that theme into the /themes directory contained within the Hugo project created above. There are two commons ways that others online will recommend doing this. One way requires downloading the theme\u0026rsquo;s repo as a zip file form Github, extracting the contents and moving them into the /themes directory. This method does not maintain the git history of the selected theme. It means that as the upstream theme repo changes you will not be able to pull those changes via git. The second method involves cloning the theme repo into /themes and declaring it as a git submodule within the enveloping git repo you created earlier. I don\u0026rsquo;t intend on maintaining my theme heavily so I will not bother with the latter approach. I also find downloading and unzipping tedious. I recommend cloning your theme into /themes and then dropping the .git management from the clone. This is done as follows:\n## Clone PaperMod theme to /themes/PaperMod. Only grab depth 1 git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod ## Remove the git history from the cloned PaperMod repo rm -rf /themes/PaperMod/.git Now that you have a theme, you need to tell Hugo to use it. To do so, edit your hugo.yaml and add\ntheme: - PaperMod ## If you chose a different theme put the name of the theme here. This is the folder under /themes that contains the theme Run Hugo Locally You can now run your site locally by running hugo server from the terminal within your project. This bring up your site at http://localhost:1313/.\nYou can change the title on your site by editing the hugo.yaml file. All PaperMod features and customizations can be found documented here: PaperMod Features\nDeploy to Github Pages Next we will deploy to Github pages. Remember that earlier we changed the Build and deployment setting to Github Actions. This means that we need to specify a Github Actions workflow for Github Runners to execute when you push your repo. Github Actions are a series of jobs that will be performed on your code base when you push to Github. In our case we will use Github Actions to build our Hugo site and deploy to Pages. To do this we must create the following workflow file in our repo: \u0026lt;github-username\u0026gt;.github.io/.github/workflows/hugo.yaml\n# Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: - main # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.128.0 steps: - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026amp;\u0026amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Install Dart Sass run: sudo snap install dart-sass - name: Checkout uses: actions/checkout@v4 with: submodules: recursive fetch-depth: 0 - name: Setup Pages id: pages uses: actions/configure-pages@v5 - name: Install Node.js dependencies run: \u0026#34;[[ -f package-lock.json || -f npm-shrinkwrap.json ]] \u0026amp;\u0026amp; npm ci || true\u0026#34; - name: Build with Hugo env: HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache HUGO_ENVIRONMENT: production TZ: America/Los_Angeles run: | hugo \\ --gc \\ --minify \\ --baseURL \u0026#34;${{ steps.pages.outputs.base_url }}/\u0026#34; - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: path: ./public # Deployment job deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 After adding this run:\ngit add . git ci -m \u0026#34;Add theme and release workflow\u0026#34; git push This will push your changes to Github. From the Github repo page for your project you can open the Actions tab to see your defined workflow running. Once this has completed you can navigate to \u0026lt;github-username\u0026gt;.github.io to view your site! This could take ~10 mins to become visible so don\u0026rsquo;t worry if you don\u0026rsquo;t see it right away.\nPart 3: Adding a Custom Domain To add a custom domain you will need to follow a few steps. First, if you do not have one already, you will need to purchase a domain from a registrar such as Cloudflare, GoDaddy, or NameCheap. Doing this is beyond the scope of this blog and there are multitudes of online guides that will explain this in more detail than I can here.\nSpecify Domain in Github Pages After acquiring a domain, return to the Pages tab under Settings \u0026gt; Build and Automation \u0026gt; Pages in Github. Here you will see the Custom domain option. Add your domain to the custom domain settings. This can be the Apex domain if such as fallow.app if you want your blog to be the root page of your domain. If you\u0026rsquo;d prefer to host your blog on a subdomain such as blog.fallow.app then enter that as your custom domain.. Replace fallow.app with your domain.\nConfigure CNAME Record in your DNS Provider. The registrar from whom you purchased your domain will have DNS settings available for your domain. There are two main DNS record types A records and CNAME records. An A record points to an IP. CNAME records are aliases to other domains. In our case we will create a CNAME record to our github pages domain. If you are doing this for the subdomain blog.\u0026lt;your domain\u0026gt;, then add blog as your CNAME record and \u0026lt;github-username\u0026gt;.github.io as your target. If you are doing this for the Apex domain (i.e. no subdomain), then use @ (this represent the apex domain) instead of blog.\nNote: DNS records take a while to propagate. You will no longer be able to reach your blog at \u0026lt;github-username\u0026gt;.github.io and it may take 24hrs for your site te become available. In my experience it has never been that long and has taken at most 30 mins.\n","permalink":"http://localhost:1313/posts/01-getting-started-w-hugo/","summary":"Big Idea The goal of this post is to capture the steps required to get started with Hugo and Github Pages. Hugo is a Go based static site generation tool. Github Pages is a feature of Github that allows anyone with a GitHub account host a static site.\nPart 1: Setting up GitHub Pages In order to server your site you will need to somewhere to host it. Github offers a free service called Github Pages that we will use for this purpose.","title":"Getting Started with Hugo \u0026 Github Pages"}]