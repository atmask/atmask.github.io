[{"content":"Big Idea The goal of this post is to capture the steps required to get started with Hugo and Github pages. Hugo is a GO based static site generation tool. Github pages is a feature of Github that allows anyone with a GitHub account host a static site.\nPart 1: Setting up GitHub Pages In order to server your site you will need to somewhere to host it. Github offers a free service called Github Pages that we will use for this purpose. Github Pages offers the free hosting of static website content. This means we will be able to build or Hugo site into a static site and then serve that via Github pages.\nCreate Github Pages Repo To get started with Github Pages for your blog you will first need a repo in which you\u0026rsquo;ll store your website content. Github pages offers websites for inidividual projects or for your user. For this tutorial we will use the user Github Pages. The first step to creating this Pages site is creating a repo in your Github account that follows the naming scheme: \u0026lt;username\u0026gt;.github.io (substitute \u0026lt;username\u0026gt; with your Github username). Select Initialize this repository with a README and then then create the repo.\nNote: Your repository must be a public repo for pages to work.\nAfter creating your repository, navigate to the repository main page and click on Settings: From the Settings page navigate to the Pages under Code and Automation on the Side Menu: From here you will want to change your Build and deployment configuration to Github Actions. This will be required later when we want to specify a Github Actions workflow to build our static site content with Hugo.\nFor now leave the Custom domain configuration alone. We will return to this at a later step.\nPart 2: Setting Up Hugo The following section covers getting your static site running on your local machine. This will allow you to modify your themes and posts from your editor of choice and see updates via the local Hugo dev server.\nInstall Hugo to your local machine To get started with Hugo on your machine you\u0026rsquo;ll need to first install Hugo. On MacOS you can do this via Brew:\nbrew install hugo Create a new Hugo Site Locally To start a new hugo project run:\nhugo new site \u0026lt;github-username\u0026gt;.github.io --format yaml Note: Using --format yaml is optional. The default config format for Hugo is toml.\nThis will create a new directory named \u0026lt;github-username\u0026gt;.github.io that is pre-populated with the Hugo starter boilerplate. You don\u0026rsquo;t have to use the site name \u0026lt;github-username\u0026gt;.github.io. You can change it whatever you would like. However, in the case of Github pages, you created your pages site in a repo named \u0026lt;github-username\u0026gt;.github.io. To keep naming consistent use the name of the existing repo.\nConnect your local Hugo Project to the Git Repo Now that you have created a new Hugo site you will want to connect it to the Github repository you created earlier. To do this we will first initialize your new local project as a git project. This can be done by entering your project directory and the running git init\ncd `\u0026lt;github-username\u0026gt;.github.io` git init This enables version control for your project. Let\u0026rsquo;s create an initial commit of the Hugo site and push to git:\ngit add . git commit -m \u0026#34;Initial commit\u0026#34; git branch -M main git remote add origin \u0026lt;git clone url\u0026gt; git push -u origin main --force ## Use force in this case to override the README in gituhb with new history Note: You can get the git clone url by navigating to your repository, selecting Clone and grabbing the https or ssh clone link. Select the ssh link if you have ssh set up for Github. This will keep you from having to enter your credentials on each push.\nAdd a Hugo Theme to your site By default Hugo does not include a theme for you site. This is where you get to pick how you want your site to look once built and deployed. You can find a complete list of themes on the Hugo themes page. For this wiki I will use the theme PaperMod as that is the theme of this blog.\nOnce you have selected a theme, you will want to clone that theme into the /themes directory contained within the Hugo project created above. There are two commons ways that others online will reccomend doing this. One way requires downloading the theme\u0026rsquo;s repo as a zipfile form Github, extracting the contents and moving them into the /themes directory. This method does not maintain the git history of the selected theme. It means that as the upstream theme repo changes you will not be able to pull those changes via git. The second method involves cloning the repo,\n","permalink":"http://localhost:1313/posts/getting-started-w-hugo/","summary":"Big Idea The goal of this post is to capture the steps required to get started with Hugo and Github pages. Hugo is a GO based static site generation tool. Github pages is a feature of Github that allows anyone with a GitHub account host a static site.\nPart 1: Setting up GitHub Pages In order to server your site you will need to somewhere to host it. Github offers a free service called Github Pages that we will use for this purpose.","title":"Getting Started with Hugo \u0026 Github Pages"}]